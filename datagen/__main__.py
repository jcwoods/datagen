import json
import os
import random
import sqlite3
import sys

from datagen.entitygenerator import EntityGenerator, EntityElement, ArrayElement
from datagen.cdf import CDF
from datagen.namegen import USCensusNameSet
from datagen.addrgen import USAddressDB
from datagen.phonegen import PhoneElement
from datagen.gendergen import GenderElement
from datagen.natidgen import NationalIDElement
from datagen.dobgen import DOBElement
from datagen.tradegen import USCreditAccount

# TODO - email generator?

# TODO - create address history, with from/to dates.

# TODO - need better phone generator:
#        - Create a CDF for each zip code with area code frequencies
#        - do not use invalid exchanges or sequence numbers

def serialize_csv(e):
    fname = e['name'].get('first', '')
    mname = e['name'].get('middle', '')
    lname = e['name'].get('last', '')
    dob = e.get('dob', '')
    ssn = e.get('ssn', '')
    phone = e.get('phone', '')
    gender = e.get('gender', '')

    for addr in e['addrs']:
        s = '|'.join(( fname, mname, lname,
                       ssn, dob, phone, gender,
                       addr['street1'], addr['street2'], addr['street3'],
                       addr['city'], addr['state'], addr['postalcode']) )
        print(s)

    return

def serialize_json(e):
    print(json.dumps(e))
    return

def main(argv):
    if len(argv) > 2:
        raise Exception('Invalid number of arguments received')

    n = 10
    if len(argv) == 2:
        try:
            n = int(argv[1])
        except:
            raise Exception('Invalid command line argument: ' + argv[1])

    egen = EntityGenerator()

    gender = GenderElement(name = 'gender')
    egen.addElement(gender)

    dob = DOBElement(name = 'dob',
                     dt_format = '%Y%m%d')
    egen.addElement(dob)

    ssn = NationalIDElement(name = 'ssn',
                            useDashes = False)
    egen.addElement(ssn)

    names = USCensusNameSet(name = 'names',
                            order = 'LFM',
                            params = { 'gender': '/gender' } )
    egen.addElement(names)

    # we're going to get a bit crazy here (because we can!).  Each entity is
    # going to get a block of addresses.  Each address will be generated by
    # the USAddress Entity class, and the number of addresses in each block
    # will be random (range  [1..5) ).  Each address will get a block of phone
    # numbers, and there will be exactly two phone numbers in each block.

    addr = USAddressDB(dbFile = "us_address.db")
    addrBlock = ArrayElement(name = 'addresses',
                             count_fn = EntityElement.count_rand_fn(max=9,
                                                                    min=1),
                             generator = addr)

    # Create a block of phone numbers
    phone = PhoneElement()
    phoneBlock = ArrayElement(name = 'phones',
                              count_fn = EntityElement.count_const_fn(2),
                              generator = phone)

    addr.addElement(phoneBlock)  # add the block of phones to each address...
    egen.addElement(addrBlock)   # ...and finally add the addresses to the entity.

    trade = USCreditAccount()
    tradeBlock = ArrayElement(name = 'trades',
                              count_fn = EntityElement.count_rand_fn(max=9,
                                                                     min=0),
                              generator = trade)
    egen.addElement(tradeBlock)

    # create a few entities 
    serialize = serialize_json
    #serialize = serialize_csv
    for i in range(n):
        entity = egen.create()
        serialize(entity)

    return 0

if __name__ == '__main__':
    main(sys.argv)
